{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sistemas Hardware-Software \u00b6 Bem vindo ao curso de Sistemas Hardware-Software 2020/2. Professor : Igor Montagner Avalia\u00e7\u00e3o \u00b6 A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamentos: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; Os Laborat\u00f3rios ser\u00e3o disponibilizados neste site e dever\u00e3o ser entregues no reposit\u00f3rio de atividades da disciplina. A m\u00e9dia final \u00e9 dada por 10% Atividades 40% Laborat\u00f3rios 50% m\u00e9dia de Provas Condi\u00e7\u00f5es de barreira M\u00e9dia de provas >= 4,5 PI, PF >= 4,0 Laborat\u00f3rios >= 5 Caso estas condi\u00e7\u00f5es n\u00e3o sejam cumpridas ver detalhes na aula 01 Mesmo que todas as condi\u00e7\u00f5es acima sejam satisfeitas \u00e9 poss\u00edvel reprovar. Um desempenho abaixo do esperado em uma atividade precisa ser compensado com um desempenho melhor em outra atividade.","title":"Home"},{"location":"#sistemas-hardware-software","text":"Bem vindo ao curso de Sistemas Hardware-Software 2020/2. Professor : Igor Montagner","title":"Sistemas Hardware-Software"},{"location":"#avaliacao","text":"A avalia\u00e7\u00e3o da disciplina ser\u00e1 composta por provas, projetos e atividades de acompanhamentos: Provas Intermedi\u00e1ria (PI) e Final (PF) ser\u00e3o compostas por exerc\u00edcios pr\u00e1ticos a serem feitos durante o tempo de prova; Os Laborat\u00f3rios ser\u00e3o disponibilizados neste site e dever\u00e3o ser entregues no reposit\u00f3rio de atividades da disciplina. A m\u00e9dia final \u00e9 dada por 10% Atividades 40% Laborat\u00f3rios 50% m\u00e9dia de Provas Condi\u00e7\u00f5es de barreira M\u00e9dia de provas >= 4,5 PI, PF >= 4,0 Laborat\u00f3rios >= 5 Caso estas condi\u00e7\u00f5es n\u00e3o sejam cumpridas ver detalhes na aula 01 Mesmo que todas as condi\u00e7\u00f5es acima sejam satisfeitas \u00e9 poss\u00edvel reprovar. Um desempenho abaixo do esperado em uma atividade precisa ser compensado com um desempenho melhor em outra atividade.","title":"Avalia\u00e7\u00e3o"},{"location":"sobre/","text":"Plano de aulas \u00b6 SEG 13:30 - 15:40 QUI 15:45 - 17:45 Atendimento: QUI 14:00 - 15:30 Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 24/08 Mutir\u00e3o C Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 27/08 Mutir\u00e3o C Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 31/08 Como a CPU representa dados em baixo n\u00edvel? Representa\u00e7\u00e3o de inteiros na CPU: n\u00fameros bin\u00e1rios e hexadecimais, complemento de dois, opera\u00e7\u00f5es bit a bit. Leitura: Cap 2 CS:APP; Cap 9 Stallings 03/09 Como a CPU representa dados em baixo n\u00edvel? Representa\u00e7\u00e3o de ponteiros, arrays e estruturas em RAM. Leitura: Cap 2 CS:APP; Cap 9 Stallings 07/09 FERIADO FERIADO 10/09 Como a CPU representa e executa um programa escrito em C? Arquitetura de computadores: registradores, mem\u00f3ria e endere\u00e7amento Assembly: Organiza\u00e7\u00e3o de um execut\u00e1vel no disco e na mem\u00f3ria Leitura: Cap 3.1 \u2013 3.4 CS:APP 14/09 Como a CPU representa e executa um programa escrito em C? Arquitetura de computadores: chamadas de fun\u00e7\u00e3o e pilha Assembly: Exerc\u00edcios com chamadas de fun\u00e7\u00e3o e opera\u00e7\u00f5es com inteiros Leitura: Cap 3.5 CS:APP 17/09 Como a CPU representa e executa um programa escrito em C? Assembly: express\u00f5es booleanas e estruturas de controle condicionais 21/09 Como a CPU representa e executa um programa escrito em C? Assembly: estruturas de controle de loop Leitura: Cap 3.6 CS:APP 24/09 Como a CPU representa e executa um programa escrito em C? Revis\u00e3o; organiza\u00e7\u00e3o de execut\u00e1vel no disco e na mem\u00f3ria Assembly: vari\u00e1veis locais, strings e arrays Leitura: Cap 3.7 \u2013 3.8 CS:APP 28/09 Como a CPU representa e executa um programa escrito em C? Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 01/10 E se meu programa precisar de mais mem\u00f3ria? A fun\u00e7\u00e3o malloc e a aloca\u00e7\u00e3o din\u00e2mica de estruturas, arrays e strings. Uso da ferramenta valgrind para checagem de mem\u00f3ria Leituras: Cap 16 Kochan (Prog in C); Cap 9.9 CS:APP 05/10 E se meu programa precisar de mais mem\u00f3ria? Tipos Abstratos de dados e aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria Leituras: Cap 6 K&R 08/10 PROVA INTERMEDI\u00c1RIA PROVA INTERMEDI\u00c1RIA 12/10 FERIADO FERIADO 15/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Vis\u00e3o global de um sistema: kernel, sistema de arquivos, biblioteca padr\u00e3o e bootloaders Leitura: Cap 10.2 Tanenbaum; Kivity et al 2014. 19/10 Como tudo isto est\u00e1 organizado em um sistema operacional? Aula est\u00fadio para projeto: Linux do Zero 22/10 Como tudo isto est\u00e1 organizado em um sistema operacional? Aula est\u00fadio para projeto: Linux do Zero 26/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para entrada/sa\u00edda Leitura: Cap 8 CS:APP, 29/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para cria\u00e7\u00e3o de processo (fork) e espera de seus resultados (wait). Leitura: Cap 8 CS:APP, Leitura complementar sobre escalonamento de processos: Cap 5 Silberschats 02/11 FERIADO PROVA INTERMEDI\u00c1RIA 05/11 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para execu\u00e7\u00e3o de programas (exec) Leitura: Cap 8 CS:APP, 09/11 E se o SO quiser avisar um processo que algo ocorreu? Sinais: conceitos, captura e bloqueio. Introdu\u00e7\u00e3o \u00e0 ideia de concorr\u00eancia 12/11 E se o SO quiser avisar um processo que algo ocorreu? Captura e bloqueio de sinais: teoria e exerc\u00edcios pr\u00e1ticos 16/11 Como envio informa\u00e7\u00f5es entre processos? Entrada e sa\u00edda padr\u00e3o, chamadas de sistema pipe, dup2 para redirecionamento de arquivos. 19/11 \u00c9 poss\u00edvel dividir o trabalho em partes que executem ao mesmo tempo? Introdu\u00e7\u00e3o ao conceito de threads e sua utiliza\u00e7\u00e3o Cria\u00e7\u00e3o de threads usando pthreads. Leitura: Cap 12 CS:APP 23/11 \u00c9 poss\u00edvel dividir o trabalho em partes que executem ao mesmo tempo? Tarefas IO- e CPU-bound. Sincroniza\u00e7\u00e3o usando sem\u00e1foros. Leitura: Cap 12 CS:APP 26/11 PROVA FINAL PROVA FINAL 30/11 PROVA FINAL PROVA FINAL 03/12 nan nan 07/12 PROVA SUB PROVA SUB","title":"Burocracias"},{"location":"sobre/#plano-de-aulas","text":"SEG 13:30 - 15:40 QUI 15:45 - 17:45 Atendimento: QUI 14:00 - 15:30 Plano de aulas Data Quest\u00e3o/Problema Conte\u00fado/Atividade 24/08 Mutir\u00e3o C Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 27/08 Mutir\u00e3o C Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 31/08 Como a CPU representa dados em baixo n\u00edvel? Representa\u00e7\u00e3o de inteiros na CPU: n\u00fameros bin\u00e1rios e hexadecimais, complemento de dois, opera\u00e7\u00f5es bit a bit. Leitura: Cap 2 CS:APP; Cap 9 Stallings 03/09 Como a CPU representa dados em baixo n\u00edvel? Representa\u00e7\u00e3o de ponteiros, arrays e estruturas em RAM. Leitura: Cap 2 CS:APP; Cap 9 Stallings 07/09 FERIADO FERIADO 10/09 Como a CPU representa e executa um programa escrito em C? Arquitetura de computadores: registradores, mem\u00f3ria e endere\u00e7amento Assembly: Organiza\u00e7\u00e3o de um execut\u00e1vel no disco e na mem\u00f3ria Leitura: Cap 3.1 \u2013 3.4 CS:APP 14/09 Como a CPU representa e executa um programa escrito em C? Arquitetura de computadores: chamadas de fun\u00e7\u00e3o e pilha Assembly: Exerc\u00edcios com chamadas de fun\u00e7\u00e3o e opera\u00e7\u00f5es com inteiros Leitura: Cap 3.5 CS:APP 17/09 Como a CPU representa e executa um programa escrito em C? Assembly: express\u00f5es booleanas e estruturas de controle condicionais 21/09 Como a CPU representa e executa um programa escrito em C? Assembly: estruturas de controle de loop Leitura: Cap 3.6 CS:APP 24/09 Como a CPU representa e executa um programa escrito em C? Revis\u00e3o; organiza\u00e7\u00e3o de execut\u00e1vel no disco e na mem\u00f3ria Assembly: vari\u00e1veis locais, strings e arrays Leitura: Cap 3.7 \u2013 3.8 CS:APP 28/09 Como a CPU representa e executa um programa escrito em C? Exerc\u00edcios pr\u00e1ticos de revis\u00e3o 01/10 E se meu programa precisar de mais mem\u00f3ria? A fun\u00e7\u00e3o malloc e a aloca\u00e7\u00e3o din\u00e2mica de estruturas, arrays e strings. Uso da ferramenta valgrind para checagem de mem\u00f3ria Leituras: Cap 16 Kochan (Prog in C); Cap 9.9 CS:APP 05/10 E se meu programa precisar de mais mem\u00f3ria? Tipos Abstratos de dados e aloca\u00e7\u00e3o din\u00e2mica de mem\u00f3ria Leituras: Cap 6 K&R 08/10 PROVA INTERMEDI\u00c1RIA PROVA INTERMEDI\u00c1RIA 12/10 FERIADO FERIADO 15/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Vis\u00e3o global de um sistema: kernel, sistema de arquivos, biblioteca padr\u00e3o e bootloaders Leitura: Cap 10.2 Tanenbaum; Kivity et al 2014. 19/10 Como tudo isto est\u00e1 organizado em um sistema operacional? Aula est\u00fadio para projeto: Linux do Zero 22/10 Como tudo isto est\u00e1 organizado em um sistema operacional? Aula est\u00fadio para projeto: Linux do Zero 26/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para entrada/sa\u00edda Leitura: Cap 8 CS:APP, 29/10 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para cria\u00e7\u00e3o de processo (fork) e espera de seus resultados (wait). Leitura: Cap 8 CS:APP, Leitura complementar sobre escalonamento de processos: Cap 5 Silberschats 02/11 FERIADO PROVA INTERMEDI\u00c1RIA 05/11 O que \u00e9 um sistema operacional? Como os programas se comunicam com ele? Sistemas operacionais: processos. Explorando chamadas de sistemas para execu\u00e7\u00e3o de programas (exec) Leitura: Cap 8 CS:APP, 09/11 E se o SO quiser avisar um processo que algo ocorreu? Sinais: conceitos, captura e bloqueio. Introdu\u00e7\u00e3o \u00e0 ideia de concorr\u00eancia 12/11 E se o SO quiser avisar um processo que algo ocorreu? Captura e bloqueio de sinais: teoria e exerc\u00edcios pr\u00e1ticos 16/11 Como envio informa\u00e7\u00f5es entre processos? Entrada e sa\u00edda padr\u00e3o, chamadas de sistema pipe, dup2 para redirecionamento de arquivos. 19/11 \u00c9 poss\u00edvel dividir o trabalho em partes que executem ao mesmo tempo? Introdu\u00e7\u00e3o ao conceito de threads e sua utiliza\u00e7\u00e3o Cria\u00e7\u00e3o de threads usando pthreads. Leitura: Cap 12 CS:APP 23/11 \u00c9 poss\u00edvel dividir o trabalho em partes que executem ao mesmo tempo? Tarefas IO- e CPU-bound. Sincroniza\u00e7\u00e3o usando sem\u00e1foros. Leitura: Cap 12 CS:APP 26/11 PROVA FINAL PROVA FINAL 30/11 PROVA FINAL PROVA FINAL 03/12 nan nan 07/12 PROVA SUB PROVA SUB","title":"Plano de aulas"},{"location":"aulas/99-corretor-automatico/","text":"99 - Corretor Autom\u00e1tico \u00b6 Algumas atividades de sala de aula entrar\u00e3o na nota final. Elas est\u00e3o marcadas como Entrega no in\u00edcio e ser\u00e3o entregues via um reposit\u00f3rio especial no Github. Preencha a pesquisa de usu\u00e1rios do Github Voc\u00ea receber\u00e1 um convite para reposit\u00f3rio. Todas as atividades ser\u00e3o disponibilizadas neste reposit\u00f3rio e suas solu\u00e7\u00f5es devem ser adicionadas nos arquivos correspondentes. O corretor autom\u00e1tico depende do pacote grading-tools , que dever\u00e1 ser instalado como abaixo. $> python3 -m pip install --user git+https://github.com/igordsm/grading-tools Com isso configurado, \u00e9 s\u00f3 compilar seu programa e rodar corretor.py executavel . Para baixar os novos exerc\u00edcios \u00e9 s\u00f3 rodar git pull . Os exerc\u00edcios ser\u00e3o entregues criando um commit com sua resposta e dando git push . Warning Fique atento a atualiza\u00e7\u00f5es no seu reposit\u00f3rio de atividades. Todo novo exerc\u00edcio para entrega disponibilizado nos handouts devera aparecer no seu reposit\u00f3rio tamb\u00e9m. Ser\u00e1 avisado em aula se for necess\u00e1rio atualizar tamb\u00e9m o pacote acima.","title":"99 - Corretor Autom\u00e1tico"},{"location":"aulas/99-corretor-automatico/#99-corretor-automatico","text":"Algumas atividades de sala de aula entrar\u00e3o na nota final. Elas est\u00e3o marcadas como Entrega no in\u00edcio e ser\u00e3o entregues via um reposit\u00f3rio especial no Github. Preencha a pesquisa de usu\u00e1rios do Github Voc\u00ea receber\u00e1 um convite para reposit\u00f3rio. Todas as atividades ser\u00e3o disponibilizadas neste reposit\u00f3rio e suas solu\u00e7\u00f5es devem ser adicionadas nos arquivos correspondentes. O corretor autom\u00e1tico depende do pacote grading-tools , que dever\u00e1 ser instalado como abaixo. $> python3 -m pip install --user git+https://github.com/igordsm/grading-tools Com isso configurado, \u00e9 s\u00f3 compilar seu programa e rodar corretor.py executavel . Para baixar os novos exerc\u00edcios \u00e9 s\u00f3 rodar git pull . Os exerc\u00edcios ser\u00e3o entregues criando um commit com sua resposta e dando git push . Warning Fique atento a atualiza\u00e7\u00f5es no seu reposit\u00f3rio de atividades. Todo novo exerc\u00edcio para entrega disponibilizado nos handouts devera aparecer no seu reposit\u00f3rio tamb\u00e9m. Ser\u00e1 avisado em aula se for necess\u00e1rio atualizar tamb\u00e9m o pacote acima.","title":"99 - Corretor Autom\u00e1tico"},{"location":"aulas/01-introducao/","text":"01 e 02 - Exerc\u00edcios de C \u00b6 O in\u00edcio do nosso curso ser\u00e1 uma revis\u00e3o de programa\u00e7\u00e3o em C . Flu\u00eancia nessa linguagem \u00e9 importante tanto para a primeira parte, em que examinamos como c\u00f3digo \u00e9 transformado em instru\u00e7\u00f5es de m\u00e1quina, quanto na segunda, em que usamos C para interagir com o sistema operacional. Importante Os exerc\u00edcios desta p\u00e1gina s\u00e3o complementares ao material do Mutir\u00e3o C . Pode ser uma boa revisitar o material do semestre passado para se recordar da estrutura b\u00e1sica de um programa em C e para as explica\u00e7\u00f5es detalhadas de cada funcionalidade usada nos exerc\u00edcios. Os exerc\u00edcios para entrega nesta p\u00e1gina contar\u00e3o na nota de atividades assim como os do restante do curso. Example Fa\u00e7a um programa que receba dois inteiros e mostre sua divis\u00e3o inteira, seu resto e sua divis\u00e3o fracion\u00e1ria (com at\u00e9 4 casas decimais). Se o segundo n\u00famero for 0, seu programa dever\u00e1 mostrar tr\u00eas 0 na sa\u00edda. Entrada 2 3 Sa\u00edda 0 2 0.6667 Example Fa\u00e7a um programa que mostra os d\u00edgitos de um n\u00famero ao contr\u00e1rio. Dica : use o operador resto da divis\u00e3o % . Entrada 123456 Sa\u00edda 6 5 4 3 2 1 Example Fa\u00e7a um programa que l\u00ea um inteiro n e depois n inteiros e computa sua m\u00e9dia. Entrada 4 1 2 3 4 Sa\u00edda 2.5 Example Entrega : Fa\u00e7a um programa que l\u00ea um inteiro n e mostre os n primeiros n\u00fameros da tabuada para todos os n\u00fameros entre 2 e n . Entrada 4 Sa\u00edda 2 4 6 8 3 6 9 12 4 8 12 16 Example Fa\u00e7a um programa que l\u00ea tr\u00eas inteiros n , d1 e d2 e imprime todos os inteiros entre 2 e n que s\u00e3o divis\u00edveis ao mesmo tempo por d1 e d2 . Entrada 15 3 2 Sa\u00edda 6 12 Example Fa\u00e7a um programa que l\u00ea at\u00e9 100 inteiros e os guarda em um vetor global nums . Voc\u00ea deve parar de ler inteiros ao receber um inteiro negativo, que n\u00e3o dever\u00e1 ser guardado. Depois de armazen\u00e1-los, leia um um n\u00famero d e imprima na tela quantos n\u00fameros lidos s\u00e3o maiores que d . Entrada : 1 2 3 4 -1 3 Sa\u00edda 1 Example Fa\u00e7a um programa que l\u00ea uma linha de texto e mostra no terminal seu tamanho. Entrada : abcdefgh Sa\u00edda 8 Example Fa\u00e7a um programa que l\u00ea uma linha de texto e conta quantas palavras tem na linha. Todo caractere n\u00e3o alfanum\u00e9rico divide uma palavra. Veja o exemplo abaixo. Entrada : palavra dois tres,quatro1continua. Cinco 3seis#sete Sa\u00edda 7 Example Entrega : Fa\u00e7a uma fun\u00e7\u00e3o que determina se uma string \u00e9 igual se lida de tr\u00e1s para frente. Voc\u00ea dever\u00e1 ignorar todos os caracteres n\u00e3o alfanum\u00e9ricos. Dica : Se necess\u00e1rio, consulte novamente a se\u00e7ao de Strings do Mutir\u00e3o. Como voc\u00ea checaria todos os caracteres entre '0' e '9'? E para as letras mai\u00fasculas e min\u00fasculas? Voc\u00ea pode precisar consultar a Tabela ASCII para entender melhor como fazer isso. Entrada : igual a laugi Sa\u00edda SIM Example Fa\u00e7a um programa que l\u00ea dois inteiros m < 100 e n < 100 . Ent\u00e3o seu programa dever\u00e1 ler uma matriz de m linhas por n colunas e mostrar no terminal o \u00edndice do maior valor de cada coluna. Declare sua matriz como vari\u00e1vel global. Iremos aprender como alocar matrizes de tamanho arbitr\u00e1rio no curso. Entrada : 3 4 1 2 5.8 6 3 6 9 8 5 2 3 2.0 Sa\u00edda 2 1 1 0","title":"01 e 02 - Exerc\u00edcios de C"},{"location":"aulas/01-introducao/#01-e-02-exercicios-de-c","text":"O in\u00edcio do nosso curso ser\u00e1 uma revis\u00e3o de programa\u00e7\u00e3o em C . Flu\u00eancia nessa linguagem \u00e9 importante tanto para a primeira parte, em que examinamos como c\u00f3digo \u00e9 transformado em instru\u00e7\u00f5es de m\u00e1quina, quanto na segunda, em que usamos C para interagir com o sistema operacional. Importante Os exerc\u00edcios desta p\u00e1gina s\u00e3o complementares ao material do Mutir\u00e3o C . Pode ser uma boa revisitar o material do semestre passado para se recordar da estrutura b\u00e1sica de um programa em C e para as explica\u00e7\u00f5es detalhadas de cada funcionalidade usada nos exerc\u00edcios. Os exerc\u00edcios para entrega nesta p\u00e1gina contar\u00e3o na nota de atividades assim como os do restante do curso. Example Fa\u00e7a um programa que receba dois inteiros e mostre sua divis\u00e3o inteira, seu resto e sua divis\u00e3o fracion\u00e1ria (com at\u00e9 4 casas decimais). Se o segundo n\u00famero for 0, seu programa dever\u00e1 mostrar tr\u00eas 0 na sa\u00edda. Entrada 2 3 Sa\u00edda 0 2 0.6667 Example Fa\u00e7a um programa que mostra os d\u00edgitos de um n\u00famero ao contr\u00e1rio. Dica : use o operador resto da divis\u00e3o % . Entrada 123456 Sa\u00edda 6 5 4 3 2 1 Example Fa\u00e7a um programa que l\u00ea um inteiro n e depois n inteiros e computa sua m\u00e9dia. Entrada 4 1 2 3 4 Sa\u00edda 2.5 Example Entrega : Fa\u00e7a um programa que l\u00ea um inteiro n e mostre os n primeiros n\u00fameros da tabuada para todos os n\u00fameros entre 2 e n . Entrada 4 Sa\u00edda 2 4 6 8 3 6 9 12 4 8 12 16 Example Fa\u00e7a um programa que l\u00ea tr\u00eas inteiros n , d1 e d2 e imprime todos os inteiros entre 2 e n que s\u00e3o divis\u00edveis ao mesmo tempo por d1 e d2 . Entrada 15 3 2 Sa\u00edda 6 12 Example Fa\u00e7a um programa que l\u00ea at\u00e9 100 inteiros e os guarda em um vetor global nums . Voc\u00ea deve parar de ler inteiros ao receber um inteiro negativo, que n\u00e3o dever\u00e1 ser guardado. Depois de armazen\u00e1-los, leia um um n\u00famero d e imprima na tela quantos n\u00fameros lidos s\u00e3o maiores que d . Entrada : 1 2 3 4 -1 3 Sa\u00edda 1 Example Fa\u00e7a um programa que l\u00ea uma linha de texto e mostra no terminal seu tamanho. Entrada : abcdefgh Sa\u00edda 8 Example Fa\u00e7a um programa que l\u00ea uma linha de texto e conta quantas palavras tem na linha. Todo caractere n\u00e3o alfanum\u00e9rico divide uma palavra. Veja o exemplo abaixo. Entrada : palavra dois tres,quatro1continua. Cinco 3seis#sete Sa\u00edda 7 Example Entrega : Fa\u00e7a uma fun\u00e7\u00e3o que determina se uma string \u00e9 igual se lida de tr\u00e1s para frente. Voc\u00ea dever\u00e1 ignorar todos os caracteres n\u00e3o alfanum\u00e9ricos. Dica : Se necess\u00e1rio, consulte novamente a se\u00e7ao de Strings do Mutir\u00e3o. Como voc\u00ea checaria todos os caracteres entre '0' e '9'? E para as letras mai\u00fasculas e min\u00fasculas? Voc\u00ea pode precisar consultar a Tabela ASCII para entender melhor como fazer isso. Entrada : igual a laugi Sa\u00edda SIM Example Fa\u00e7a um programa que l\u00ea dois inteiros m < 100 e n < 100 . Ent\u00e3o seu programa dever\u00e1 ler uma matriz de m linhas por n colunas e mostrar no terminal o \u00edndice do maior valor de cada coluna. Declare sua matriz como vari\u00e1vel global. Iremos aprender como alocar matrizes de tamanho arbitr\u00e1rio no curso. Entrada : 3 4 1 2 5.8 6 3 6 9 8 5 2 3 2.0 Sa\u00edda 2 1 1 0","title":"01 e 02 - Exerc\u00edcios de C"}]}